name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Add python requirements
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Prepare compiler environment for Windows
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Update vcpkg
      if: runner.os == 'Windows'
      run: |
        cd C:\vcpkg
        git pull
        .\\bootstrap-vcpkg.bat

    - name: Install deps with vcpkg
      if: runner.os == 'Windows'
      run: |
        vcpkg install libdatrie:x64-windows pybind11:x64-windows
        vcpkg integrate install

    # This makes msvc and vcpkg environment variables available in the following step(s)
    - name: Set Windows environment variables
      if: runner.os == 'Windows'
      run: |
        .github/workflows/vs_env.bat x64
        source env.sh
        echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $GITHUB_ENV

    - name: apt helper action
      if: runner.os == 'Linux'
      uses: ryankurte/action-apt@v0.2.0
      with:
        # architectures to pass to dpkg --add-architecture
        #architectures: # optional
        packages: libdatrie-dev pybind11-dev ninja-build

    - name: Test with tox
      run: |
        tox -e py

    - name: Build dist pkgs
      run: |
        tox -e deploy

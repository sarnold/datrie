name: Release

on:
  push:
    # release on tag push
    tags:
      - '*'

jobs:
  cibw_wheels:
    name: Build wheels on ${{ matrix.os }} for Python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Prepare compiler environment for Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==1.7.1

      - name: Build wheels
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2010_x86_64:latest
          CIBW_MANYLINUX_I686_IMAGE: quay.io/pypa/manylinux2010_i686:latest
          CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
          CIBW_SKIP: "*-win32"
          CIBW_BEFORE_ALL_LINUX: >
            yum -y -q --enablerepo=extras install epel-release
            && yum install -y ninja-build
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel show {wheel} && auditwheel repair -w {dest_dir} {wheel}"
          CIBW_BEFORE_ALL_MACOS: >
            brew install pybind11 ninja
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.09
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "pip uninstall -y delocate && pip install git+https://github.com/Chia-Network/delocate.git && delocate-listdeps {wheel} && delocate-wheel -w {dest_dir} -v {wheel}"
          CIBW_TEST_COMMAND: python -c "import datrie"
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          pip install pep517
          python -m pep517.build -s .

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  create_release:
    needs: [cibw_wheels, sdist]
    runs-on: ubuntu-20.04

    steps:
      - name: Get version
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo ${{ env.VERSION }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: 3.7

      # download all artifacts to project dir
      - uses: actions/download-artifact@v2

      - name: Install gitchangelog
        run: |
          python -m pip install https://github.com/freepn/gitchangelog/archive/3.0.5.tar.gz

      - name: Generate changes file
        run: |
          export GITCHANGELOG_CONFIG_FILENAME=$(get-rcpath)
          bash -c 'gitchangelog $(git tag --sort=taggerdate | tail -n2 | head -n1)..${{ env.VERSION }} > CHANGES.md'

      - name: Create draft release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: CHANGES.md
          draft: true
          prerelease: true
          # uncomment below to upload wheels to github releases
          files: wheels/datrie*.whl

  #upload_pypi:
    #needs: [cibw_wheels, sdist]
    #runs-on: ubuntu-latest
    ## upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    ## alternatively, to publish when a GitHub Release is created, use the following rule:
    ## if: github.event_name == 'release' && github.event.action == 'published'
    #steps:
      #- uses: actions/download-artifact@v2
        #with:
          #name: artifact
          #path: dist

      #- uses: pypa/gh-action-pypi-publish@master
        #with:
          #user: __token__
          #password: ${{ secrets.pypi_password }}

